#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX_LEN 30   // Maximum identifier length

// Function to check if a character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
            ch == '=' || ch == '<' || ch == '>' || ch == '!' ||
            ch == '%' || ch == '&' || ch == '|');
}

// Function to check if a string is a valid identifier
int isIdentifier(char *str) {
    if (!isalpha(str[0]) && str[0] != '_')
        return 0;
    for (int i = 1; str[i] != '\0'; i++) {
        if (!isalnum(str[i]) && str[i] != '_')
            return 0;
    }
    return 1;
}

int main() {
    char ch, buffer[MAX_LEN];
    int i = 0;

    printf("Enter code (end input with # symbol):\n");

    while ((ch = getchar()) != '#' && ch != EOF) {
        // Skip spaces, tabs, and new lines
        if (ch == ' ' || ch == '\t' || ch == '\n')
            continue;

        // Skip single-line comments //
        if (ch == '/') {
            char next = getchar();
            if (next == '/') {
                while ((ch = getchar()) != '\n' && ch != '#' && ch != EOF);
                continue;
            } else if (next == '*') {
                while (1) {
                    ch = getchar();
                    if (ch == '#' || ch == EOF) break;
                    if (ch == '*' && (ch = getchar()) == '/')
                        break;
                }
                continue;
            } else {
                ungetc(next, stdin); // Not a comment, treat as operator
            }
        }

        // If operator
        if (isOperator(ch)) {
            printf("Operator: %c\n", ch);
        }

        // If digit (constant)
        else if (isdigit(ch)) {
            i = 0;
            buffer[i++] = ch;
            while (isdigit(ch = getchar()))
                buffer[i++] = ch;
            buffer[i] = '\0';
            printf("Constant: %s\n", buffer);
            ungetc(ch, stdin);
        }

        // If identifier
        else if (isalpha(ch) || ch == '_') {
            i = 0;
            buffer[i++] = ch;
            while ((isalnum(ch = getchar()) || ch == '_') && i < MAX_LEN - 1)
                buffer[i++] = ch;
            buffer[i] = '\0';
            if (isIdentifier(buffer))
                printf("Identifier: %s\n", buffer);
            else
                printf("Invalid Identifier: %s\n", buffer);
            ungetc(ch, stdin);
        }
    }

    return 0;
}
